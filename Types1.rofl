x = x

IsType No

IsType Yes
Yep `IsValueOf Yes

IsType Bool
True `IsValueOf Bool
False `IsValueOf Bool

IsType Nat
Z `IsValueOf Nat
S n `IsValueOf Nat ~|
  n `IsValueOf Nat

IsType (List a) ~|
  IsType a
Nil `IsValueOf (List a) ~|
  IsType a
(hd :: tl) `IsValueOf (List a) ~|
  hd `IsValueOf a,
  tl `IsValueOf (List a)

v: t ~|
  v `IsValueOf t

val => val ~|
  val `IsValueOf _

m + n: Nat ~|
  m: Nat,
  n: Nat
m + n => p ~|
  m: Nat,
  n: Nat,
  (m => Z, n => p |,
   m => S q, q + S n => p)

m * n: Nat ~|
  m: Nat,
  n: Nat
m * n => p ~|
  m: Nat,
  n: Nat,
  (m => Z, p = Z |,
   m => S q, q * n => r, r + n => p)

LengthOf l: Nat ~|
  l: List _
LengthOf l => n ~|
  l: List _,
  (l => Nil, n = Z |,
   l => (hd :: tl), LengthOf tl => m, n = S m)

l0 ++ l1: List a ~|
  l0: List a,
  l1: List a
l0 ++ l1 => l2 ~|
  l0: List a,
  l1: List a,
  (l0 => Nil, l2 = l1 |,
   l0 => (hd :: tl), tl ++ l1 => l3, l2 = (hd :: l3))
