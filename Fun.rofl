x = x

IsLegalFunction x ~|
  x *> {
    (\) | Never
    (S) | Never
    (|:) | Never
    _ | Always
  }

fun arg => result ~|
  IsLegalFunction fun,
  fun => (pat\ body),
  arg => pat,
  body => result

(fun |: arg0 |: arg1 |: maybeMoreArgs) => result ~|
  IsLegalFunction fun,
  fun arg0 => fun1,
  (fun1 |: arg1 |: maybeMoreArgs) => result

name => result ~|
  (name ~~ definition),
  definition => result

v => v ~|
  IsValue v

IsValue (pat\ body)

IsValue 0
IsValue (S |: n) ~|
  IsValue n

Succ ~~ n\ (S |: n)

Twice ~~ 0\ 0
Twice ~~ (S |: n)\ Succ (Succ (Twice n))

(+) ~~ 0\ n\ n
(+) ~~ (S |: m)\ n\ m + (S |: n)

(*) ~~ 0\ n\ 0
(*) ~~ (S |: m)\ n\ n + m * n

IsEven 0
IsEven (S |: S |: n) ~|
  IsEven n

0 < (S |: n)
(S |: m) < (S |: n) ~|
  m < n

IsComposite p ~|
  m < p,
  n < p,
  m * n => p