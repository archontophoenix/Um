;; =============================================================================
;; A typechecker for a dependently typed language with intensional judgmental
;; equality.
;;
;; Requires: StdLib
;;
;; The raw dependently typed lambda calculus implemented here has 5 kinds of
;; terms:
;;
;;    `! n              variable, where n is a bottom-up deBruijn index
;;    parmType \ body   lambda abstraction whose parameter has type parmType
;;    fun $ arg         application of fun to arg
;;    parmType ? resultType
;;                      type of (dependent) function that takes parmType to
;;                      resultType
;;    Ty                type of types (without stratification; the idea is that
;;                      universe level consistency can be checked in a later
;;                      pass)
;;
;; Typechecking each term of the calculus takes place in a context, which is a
;; stack that takes the form of a Rofl list, where deBruijn index 0 refers to
;; the top of the stack. Each entry is the type of the variable at the
;; corresponding binder depth in the program being typechecked. Each entry is a
;; value, that is, reduced as far as possible -- this means that two
;; intensionally equal types will unify, so there is no need for a separate rule
;; defining a judgmental equality for types.
;;
;; A type value can take any of the above forms except a lambda abstraction.
;;
;; The calculus implements the following relations:
;;
;;    term |=> value
;;                      The term term evaluates to value value
;;    ctx |- term : typeVal
;;                      The term term has type value typeVal in context ctx
;;    Apply funVal To argVal Is resultVal
;;                      Completes application after function and argument have
;;                      been evaluated to produce result value resultVal
;;    Subst src ForVar n In dst Is result
;;                      Substitutes src for variable `!n in dst to produce
;;                      result. src, dst, and result are terms (not necessarily
;;                      fully reduced)
;;    Shift upOrDown AtDepth depth In term Is result
;;                      Adjusts deBruijn indices in term term, which has been
;;                      substituted into another term at binder nesting depth
;;                      depth. upOrDown is Down (decrease adjusted indices by 1)
;;                      or (Up n) (increase adjusted indices by n).
;;    IsConst term      evaluating or substituting into term results in term
;;
;; The rules for shifting of deBruijn indices are adapted from Benjamin Pierce's
;; "Types and Programming Languages" (2002) starting on page 78,
;;
;; To ensure consistency, the typechecker must obey these rules:
;;
;; . The typechecker can call the evaluator, but not vice versa (evaluation
;;   environments do not contain the type information that the typechecker
;;   would need).
;;
;; . No term can be evaluated before it is typechecked (a term that does not
;;   typecheck may be ill-formed or contain unbound variables).

;; =============================================================================
;; Constants and other useful facts

IsConst Ty

IsBinderOp (\)
IsBinderOp (?)

;; =============================================================================
;; Evaluation rules

`!n |=> `!n

(parmType\ body) |=> (parmTypeVal\ bodyVal) ~|
  (parmType |=> parmTypeVal),
  (body |=> bodyVal)

fun $ arg |=> resultVal ~|
  (fun |=> funVal),
  (arg |=> argVal),
  Apply funVal To argVal Is resultVal

(parmType? resultType) |=> (parmTypeVal? resultTypeVal) ~|
  (parmType |=> parmTypeVal),
  (resultType |=> resultTypeVal)

term |=> term ~|
  IsConst term

;; =============================================================================
;; Application of evaluated terms to evaluated arguments

Apply `!n To argVal Is (`!n $ argVal)
Apply (_ \  bodyVal) To argVal Is resultVal ~|
  Shift (Up 1) AtDepth 0 In argVal Is argValUp,
  Subst argValUp ForVar 0 In bodyVal Is resultUp,
  Shift Down AtDepth 0 In resultUp Is result,
  (result |=> resultVal)
Apply (neutralFun $ arg0) To argVal Is (neutralFun $ arg0 $ argVal)

;; =============================================================================
;; Substitution

Subst src ForVar n In `!m Is result ~|
  n - m => diff,
  VarSubst src InVar m By diff Is result
VarSubst src InVar _ By `+0 Is src
VarSubst _ InVar m By `+(S |: x) Is `!m 
VarSubst _ InVar m By `-x Is `!m 

Subst src ForVar n In [binderOp parmType body] Is [
    binderOp parmTypeSubst bodySubst] ~|
  IsBinderOp binderOp,
  Subst src ForVar n In parmType Is parmTypeSubst,
  Shift (Up 1) AtDepth 0 In src Is srcUp,
  Subst srcUp ForVar (S |: n) In body Is bodySubst

Subst src ForVar n In (fun $ arg) Is (funSubst $ argSubst) ~|
  Subst src ForVar n In fun Is funSubst,
  Subst src ForVar n In arg Is argSubst

Subst src ForVar n In const Is const ~|
  IsConst const

;; =============================================================================
;; Shifting of deBruijn indices for substitution

Shift _ AtDepth depth In `!n Is `!n ~|
  n < depth
Shift (Up m) AtDepth depth In `!n Is `!k ~|
  depth =< n,
  m + n => k
Shift Down AtDepth depth In `!(S |: n) Is `!n ~|
  depth =< (S |: n)

Shift upOrDown AtDepth depth In [binderOp parmType body] Is [
    binderOp parmTypeShift bodyShift] ~|
  IsBinderOp binderOp,
  Shift upOrDown AtDepth depth In parmType Is parmTypeShift,
  Shift upOrDown AtDepth (S |: depth) In body Is bodyShift

Shift upOrDown AtDepth depth In (fun $ arg) Is (funShift $ argShift) ~|
  Shift upOrDown AtDepth depth In fun Is funShift,
  Shift upOrDown AtDepth depth In arg Is argShift

Shift _ AtDepth depth In const Is const ~|
  IsConst const

;; =============================================================================
;; Typechecking rules

ctx |- `!n: typeVal ~|
  ctx @ n => typeValDown,
  Shift (Up (S |: n)) AtDepth 0 In typeValDown Is typeVal

ctx |- (parmType\ body): (parmTypeVal? resultTypeVal) ~|
  (ctx |- parmType: Ty),
  (parmType |=> parmTypeVal),
  ((parmTypeVal |: ctx) |- body: resultTypeVal)

ctx |- fun $ arg: resultTypeVal ~|
  (ctx |- fun: parmTypeVal? resultBodyVal),
  (ctx |- arg: parmTypeVal),
  (arg |=> argVal),
  Apply (parmTypeVal\ resultBodyVal) To argVal Is resultTypeVal

ctx |- parmType? resultType: Ty ~|
  (ctx |- parmType: Ty),
  (parmType |=> parmTypeVal),
  ((parmTypeVal |: ctx) |- resultType: Ty)

ctx |- Ty: Ty
